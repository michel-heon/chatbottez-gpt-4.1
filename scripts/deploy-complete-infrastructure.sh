#!/bin/bash

# =================================================================
# Script de D√©ploiement Infrastructure Compl√®te - Bicep
# ChatBottez GPT-4.1 - D√©ploiement des composants manquants
# =================================================================

set -euo pipefail

# Configuration
RESOURCE_GROUP="rg-chatbottez-gpt-4-1-dev-02"
LOCATION="Canada Central"
DEPLOYMENT_NAME="complete-infrastructure-$(date +%Y%m%d-%H%M%S)"
BICEP_FILE="infra/complete-infrastructure.bicep"
PARAMETERS_FILE="infra/complete-infrastructure.parameters.json"

# Couleurs pour l'output
CYAN='\033[0;36m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${CYAN}=================================================================${NC}"
echo -e "${CYAN}üöÄ D√©ploiement Infrastructure Compl√®te ChatBottez GPT-4.1${NC}"
echo -e "${CYAN}=================================================================${NC}"
echo ""

# V√©rifications pr√©alables
echo -e "${YELLOW}üîç V√©rifications pr√©alables...${NC}"

# V√©rifier Azure CLI
if ! command -v az &> /dev/null; then
    echo -e "${RED}‚ùå Azure CLI n'est pas install√©${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Azure CLI disponible${NC}"

# V√©rifier la connexion Azure
if ! az account show &> /dev/null; then
    echo -e "${RED}‚ùå Non connect√© √† Azure${NC}"
    echo "Veuillez vous connecter avec: az login"
    exit 1
fi
echo -e "${GREEN}‚úÖ Connect√© √† Azure${NC}"

# V√©rifier que le groupe de ressources existe
if ! az group show --name "$RESOURCE_GROUP" &> /dev/null; then
    echo -e "${RED}‚ùå Groupe de ressources $RESOURCE_GROUP n'existe pas${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Groupe de ressources $RESOURCE_GROUP existe${NC}"

# V√©rifier que les fichiers Bicep existent
if [[ ! -f "$BICEP_FILE" ]]; then
    echo -e "${RED}‚ùå Fichier Bicep $BICEP_FILE introuvable${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Fichier Bicep trouv√©${NC}"

if [[ ! -f "$PARAMETERS_FILE" ]]; then
    echo -e "${RED}‚ùå Fichier de param√®tres $PARAMETERS_FILE introuvable${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Fichier de param√®tres trouv√©${NC}"

echo ""

# Demander confirmation de l'utilisateur
echo -e "${YELLOW}üìã R√©sum√© du d√©ploiement:${NC}"
echo "   ‚Ä¢ Groupe de ressources: $RESOURCE_GROUP"
echo "   ‚Ä¢ R√©gion: $LOCATION"
echo "   ‚Ä¢ Nom du d√©ploiement: $DEPLOYMENT_NAME"
echo "   ‚Ä¢ Fichier Bicep: $BICEP_FILE"
echo "   ‚Ä¢ Param√®tres: $PARAMETERS_FILE"
echo ""

# Composants qui seront d√©ploy√©s
echo -e "${YELLOW}üèóÔ∏è  Composants qui seront d√©ploy√©s:${NC}"
echo "   ‚Ä¢ Log Analytics Workspace"
echo "   ‚Ä¢ Application Insights"
echo "   ‚Ä¢ API Management (Developer SKU)"
echo "   ‚Ä¢ Azure OpenAI Service (avec d√©ploiement GPT-4)"
echo "   ‚Ä¢ App Service Plan (Basic B1)"
echo "   ‚Ä¢ Web App pour Teams Bot"
echo "   ‚Ä¢ Key Vault Access Policies"
echo "   ‚Ä¢ Secrets dans Key Vault"
echo ""

read -p "Voulez-vous continuer avec le d√©ploiement? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}‚ùå D√©ploiement annul√© par l'utilisateur${NC}"
    exit 0
fi

echo ""
echo -e "${CYAN}üöÄ D√©marrage du d√©ploiement...${NC}"

# Valider le template Bicep
echo -e "${YELLOW}üîç Validation du template Bicep...${NC}"
if az deployment group validate \
    --resource-group "$RESOURCE_GROUP" \
    --template-file "$BICEP_FILE" \
    --parameters "@$PARAMETERS_FILE" \
    --output none; then
    echo -e "${GREEN}‚úÖ Template Bicep valide${NC}"
else
    echo -e "${RED}‚ùå Erreur de validation du template Bicep${NC}"
    exit 1
fi

# Pr√©visualiser les changements (What-If)
echo -e "${YELLOW}üîç Pr√©visualisation des changements (What-If)...${NC}"
az deployment group what-if \
    --resource-group "$RESOURCE_GROUP" \
    --template-file "$BICEP_FILE" \
    --parameters "@$PARAMETERS_FILE"

echo ""
read -p "Les changements ci-dessus vous conviennent-ils? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}‚ùå D√©ploiement annul√© apr√®s aper√ßu${NC}"
    exit 0
fi

# D√©ploiement effectif
echo ""
echo -e "${CYAN}üöÄ D√©ploiement en cours...${NC}"
echo "‚è±Ô∏è  Ceci peut prendre 15-30 minutes..."

START_TIME=$(date +%s)

if az deployment group create \
    --name "$DEPLOYMENT_NAME" \
    --resource-group "$RESOURCE_GROUP" \
    --template-file "$BICEP_FILE" \
    --parameters "@$PARAMETERS_FILE" \
    --output json > deployment_output.json; then
    
    END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    MINUTES=$((DURATION / 60))
    SECONDS=$((DURATION % 60))
    
    echo -e "${GREEN}‚úÖ D√©ploiement termin√© avec succ√®s!${NC}"
    echo "‚è±Ô∏è  Dur√©e: ${MINUTES}m ${SECONDS}s"
    
    # Afficher les outputs
    echo ""
    echo -e "${CYAN}üìã Informations de d√©ploiement:${NC}"
    
    # Extraire les outputs du d√©ploiement
    if command -v jq &> /dev/null; then
        echo "üìã Ressources d√©ploy√©es:"
        jq -r '.properties.outputs | to_entries[] | "   ‚Ä¢ \(.key): \(.value.value)"' deployment_output.json 2>/dev/null || true
    else
        echo "   Consultez deployment_output.json pour les d√©tails complets"
    fi
    
else
    echo -e "${RED}‚ùå Erreur durant le d√©ploiement${NC}"
    echo "Consultez les logs Azure pour plus de d√©tails"
    exit 1
fi

echo ""
echo -e "${CYAN}üéâ Infrastructure compl√®te d√©ploy√©e avec succ√®s!${NC}"
echo ""
echo -e "${YELLOW}üìã Prochaines √©tapes:${NC}"
echo "   1. V√©rifier le d√©ploiement: az deployment group show --name $DEPLOYMENT_NAME --resource-group $RESOURCE_GROUP"
echo "   2. Tester la connectivit√©: make validate"
echo "   3. D√©ployer le code de l'application: make deploy-app"
echo "   4. Configurer Teams Bot Framework"
echo "   5. Tester l'int√©gration compl√®te"

echo ""
echo -e "${GREEN}‚ú® D√©ploiement termin√©!${NC}"
