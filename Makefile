# =================================================================
# Makefile - Microsoft Marketplace Quota Management System
# Orchestration des scripts de d√©ploiement et configuration
# =================================================================

.PHONY: help setup deploy configure validate clean test-config test-db status status-deployment deploy-dev06 deploy-app-dev06 deploy-dev06-full check-deps all env-local-create bot-credentials-setup-dev06 reset teamsfx-set-subscription

# Configuration
SCRIPTS_DIR := scripts
CONFIG_DIR := config

# Azure Configuration - Microsoft Azure Sponsorship
AZURE_SUBSCRIPTION_ID := 0f1323ea-0f29-4187-9872-e1cf15d677de
AZURE_SUBSCRIPTION_NAME := Microsoft Azure Sponsorship
AZURE_TENANT_ID := aba0984a-85a2-4fd4-9ae5-0a45d7efc9d2
AZURE_TENANT_ID := aba0984a-85a2-4fd4-9ae5-0a45d7efc9d2

# Couleurs pour l'output
CYAN := \033[0;36m
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m

# ==================================================================
# üéØ COMMANDES PRINCIPALES
# ==================================================================

## help: üìã Afficher cette aide
help:
	@echo ""
	@echo "$(CYAN)=================================================================$(NC)"
	@echo "$(CYAN)üìö CHATBOTTEZ GPT-4.1 - SYST√àME DE GESTION$(NC)"
	@echo "$(CYAN)=================================================================$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö° COMMANDES RAPIDES:$(NC)"
	@echo "  $(GREEN)make setup$(NC)                     üîß Configuration initiale compl√®te"
	@echo "  $(GREEN)make teamsfx-dev06-full$(NC)        üåü D√©ploiement complet avec TeamsFx (RECOMMAND√â)"
	@echo "  $(GREEN)make deploy-dev06-full$(NC)         ÔøΩ D√©ploiement complet legacy (scripts personnalis√©s)"
	@echo "  $(GREEN)make status$(NC)                    üìä V√©rifier l'√©tat du syst√®me"
	@echo ""
	@echo "$(YELLOW)üåü MICROSOFT 365 AGENTS TOOLKIT (M√âTHODE NATIVE):$(NC)"
	@echo "  $(GREEN)make teamsfx-install$(NC)           üì¶ Installer TeamsFx CLI"
	@echo "  $(GREEN)make teamsfx-login$(NC)             üîê Se connecter aux services M365 (Azure Sponsorship)"
	@echo "  $(GREEN)make teamsfx-set-subscription$(NC)  ‚öôÔ∏è Configurer subscription Azure Sponsorship"
	@echo "  $(GREEN)make teamsfx-env-check$(NC)         ‚úÖ V√©rifier l'environnement TeamsFx"
	@echo "  $(GREEN)make teamsfx-build$(NC)             üî® Construire l'application"
	@echo "  $(GREEN)make teamsfx-provision-dev06$(NC)   üèóÔ∏è Provisionner l'infrastructure"
	@echo "  $(GREEN)make teamsfx-deploy-dev06$(NC)      üöÄ D√©ployer l'application"
	@echo "  $(GREEN)make teamsfx-publish-dev06$(NC)     üì± Publier dans Teams"
	@echo "  $(GREEN)make teamsfx-preview-dev06$(NC)     üëÄ Pr√©visualiser dans Teams"
	@echo "  $(GREEN)make teamsfx-status-dev06$(NC)      üìä Statut de l'application"
	@echo "  $(GREEN)make teamsfx-logs-dev06$(NC)        üìã Consulter les logs"
	@echo "  $(GREEN)make teamsfx-clean-dev06$(NC)       üßπ Nettoyer l'environnement"
	@echo ""
	@echo "$(YELLOW)üèóÔ∏è CONFIGURATION & ENVIRONNEMENT:$(NC)"
	@echo "  $(GREEN)make env-local-create$(NC)          üîë Cr√©er le fichier .env.local automatiquement"
	@echo "  $(GREEN)make environment$(NC)               üåç Configuration environnement"
	@echo "  $(GREEN)make database$(NC)                  üíæ Configuration base de donn√©es"
	@echo "  $(GREEN)make marketplace$(NC)               üíº Configuration API Marketplace"
	@echo ""
	@echo "$(YELLOW)ÔøΩ D√âPLOIEMENT LEGACY (Scripts personnalis√©s):$(NC)"
	@echo "  $(GREEN)make deploy$(NC)                    üöÄ D√©ploiement infrastructure Azure"
	@echo "  $(GREEN)make configure$(NC)                 ‚öôÔ∏è Configuration post-d√©ploiement"
	@echo "  $(GREEN)make deploy-dev06$(NC)              üÜï D√©ploiement infrastructure dev-06"
	@echo "  $(GREEN)make deploy-app-dev06$(NC)          ÔøΩ D√©ployer application dev-06"
	@echo "  $(GREEN)make bot-credentials-setup-dev06$(NC) üîê R√©g√©n√©rer credentials Bot (dev-06)"
	@echo ""
	@echo "$(YELLOW)‚úÖ VALIDATION & TESTS:$(NC)"
	@echo "  $(GREEN)make validate$(NC)                  ‚úÖ Validation compl√®te du syst√®me"
	@echo "  $(GREEN)make test-config$(NC)               üß™ Tester la configuration"
	@echo "  $(GREEN)make test-db$(NC)                   üíæ Tester la connexion DB"
	@echo "  $(GREEN)make check-deps$(NC)                üîç V√©rifier les d√©pendances"
	@echo ""
	@echo "$(YELLOW)üìä MONITORING & DIAGNOSTIC:$(NC)"
	@echo "  $(GREEN)make status$(NC)                    üìä Statut g√©n√©ral du syst√®me"
	@echo "  $(GREEN)make status-deployment$(NC)         üìä √âtat des d√©ploiements Azure"
	@echo "  $(GREEN)make teamsfx-account-status$(NC)    ÔøΩ Statut des comptes TeamsFx"
	@echo ""
	@echo "$(YELLOW)üõ†Ô∏è UTILITAIRES:$(NC)"
	@echo "  $(GREEN)make clean$(NC)                     üßπ Nettoyer fichiers temporaires"
	@echo "  $(GREEN)make scripts-cleanup$(NC)          üßπ Nettoyer scripts obsol√®tes"
	@echo "  $(GREEN)make reset$(NC)                     üîÑ RESET COMPLET - Tout remettre √† neuf"
	@echo "  $(GREEN)make purge-dev06$(NC)               ‚ôª Purger ressources soft-deleted"
	@echo ""
	@echo "$(CYAN)=================================================================$(NC)"
	@echo "$(YELLOW)üí° WORKFLOW RECOMMAND√â (Microsoft 365 Agents Toolkit):$(NC)"
	@echo "$(CYAN)=================================================================$(NC)"
	@echo "  1. $(GREEN)make setup$(NC)                   # Configuration initiale"
	@echo "  2. $(GREEN)make teamsfx-install$(NC)         # Installer TeamsFx CLI"
	@echo "  3. $(GREEN)make teamsfx-login$(NC)           # Se connecter aux services"
	@echo "  4a. $(GREEN)make teamsfx-provision-dev06$(NC) # Provisionner infrastructure"
	@echo "  4b. $(GREEN)make teamsfx-deploy-dev06$(NC)    # D√©ployer application"
	@echo "  4c. $(GREEN)make teamsfx-publish-dev06$(NC)   # Publier dans Teams"
	@echo "  OU  $(GREEN)make teamsfx-dev06-full$(NC)      # D√©ploiement complet (4a+4b+4c)"
	@echo "  5. $(GREEN)make teamsfx-preview-dev06$(NC)   # Tester dans Teams"
	@echo ""
	@echo "$(CYAN)=================================================================$(NC)"
	@echo "$(YELLOW)üí° WORKFLOW LEGACY (Scripts personnalis√©s):$(NC)"
	@echo "$(CYAN)=================================================================$(NC)"
	@echo "  1. $(GREEN)make setup$(NC)                   # Configuration initiale"
	@echo "  2a. $(GREEN)make provision-dev06$(NC)        # Provisionner infrastructure"
	@echo "  2b. $(GREEN)make deploy-dev06$(NC)           # D√©ployer application (inclut 2a)"
	@echo "  OU  $(GREEN)make deploy-dev06-full$(NC)       # D√©ploiement complet (2a+2b)"
	@echo "  3. $(GREEN)make validate$(NC)                # Validation finale"
	@echo ""
	@echo "$(BLUE)üìñ Documentation: docs/README.md$(NC)"
	@echo "$(BLUE)üîß Aide technique: docs/DEV06_DEPLOYMENT_GUIDE.md$(NC)"
	@echo ""

## all: üéâ Processus de d√©ploiement complet
all: setup deploy configure validate
	@echo ""
	@echo "$(GREEN)=================================================================$(NC)"
	@echo "$(GREEN)üéâ D√âPLOIEMENT COMPLET TERMIN√â AVEC SUCC√àS!$(NC)"
	@echo "$(GREEN)=================================================================$(NC)"
	@echo ""
	@echo "$(CYAN)üöÄ Votre syst√®me est maintenant pr√™t √† utiliser!$(NC)"
	@echo ""
	@echo "$(YELLOW)Prochaines √©tapes:$(NC)"
	@echo "  1. D√©marrer l'application: $(GREEN)npm run dev$(NC)"
	@echo "  2. Tester les fonctionnalit√©s Microsoft Teams"
	@echo "  3. V√©rifier les quotas dans Azure Portal"
	@echo ""

# ==================================================================
# üîß COMMANDES DE CONFIGURATION
# ==================================================================

## setup: üîß Configuration initiale compl√®te (environnement + database + marketplace)
setup: environment database marketplace
	@echo ""
	@echo "$(GREEN)‚úÖ Configuration initiale termin√©e!$(NC)"
	@echo "$(YELLOW)Prochaine √©tape: $(GREEN)make deploy$(NC)"

## env-local-create: üîë Cr√©er le fichier .env.local avec valeurs g√©n√©r√©es automatiquement
env-local-create:
	@echo "$(CYAN)Cr√©ation du fichier env/.env.local...$(NC)"
	@if [ -f "env/.env.local" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Le fichier env/.env.local existe d√©j√†!$(NC)"; \
		echo "$(YELLOW)Voulez-vous le remplacer? (y/N):$(NC)"; \
		read -r response; \
		if [ "$$response" != "y" ] && [ "$$response" != "Y" ]; then \
			echo "$(RED)‚ùå Op√©ration annul√©e$(NC)"; \
			exit 1; \
		fi; \
		cp env/.env.local env/.env.local.backup; \
		echo "$(GREEN)‚úÖ Sauvegarde cr√©√©e: env/.env.local.backup$(NC)"; \
	fi
	@echo "$(CYAN)üîë G√©n√©ration de la cl√© JWT s√©curis√©e...$(NC)"
	@JWT_KEY=$$(node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"); \
	TENANT_ID=$$(az account show --query "tenantId" -o tsv 2>/dev/null || echo "to-be-configured"); \
	echo "$(CYAN)üìù Cr√©ation du fichier de configuration...$(NC)"; \
	printf '%s\n' \
		'# =================================================================' \
		'# Microsoft Teams AI Chatbot - Configuration Locale' \
		'# =================================================================' \
		'# ‚ö†Ô∏è IMPORTANT: Ce fichier contient des secrets - Ne jamais commiter !' \
		"# G√©n√©r√© automatiquement le $$(date '+%Y-%m-%d %H:%M:%S')" \
		'' \
		'# =================================================================' \
		'# Microsoft Teams Framework - Built-in Variables' \
		'# =================================================================' \
		'TEAMSFX_ENV=local' \
		'APP_NAME_SUFFIX=local' \
		'' \
		'# Azure Tenant Configuration' \
		"TENANT_ID=$$TENANT_ID" \
		'' \
		'# Teams App Configuration (√Ä compl√©ter apr√®s d√©ploiement)' \
		'BOT_ID=to-be-filled-after-deployment' \
		'TEAMS_APP_ID=to-be-filled-after-deployment' \
		'BOT_DOMAIN=to-be-filled-with-ngrok-or-azure-domain' \
		'BOT_ENDPOINT=https://to-be-filled-with-ngrok-or-azure-domain' \
		'' \
		'# =================================================================' \
		'# Security - JWT Secret Key (G√©n√©r√© automatiquement)' \
		'# =================================================================' \
		"JWT_SECRET_KEY=$$JWT_KEY" \
		'' \
		'# =================================================================' \
		'# Database Configuration (Local Development)' \
		'# =================================================================' \
		'DB_TYPE=postgresql' \
		'DB_HOST=localhost' \
		'DB_PORT=5432' \
		'DB_NAME=marketplace_quota' \
		'DB_USER=marketplace_user' \
		'DB_PASSWORD=local-dev-password-123' \
		'' \
		'# Database connection string for application' \
		'DATABASE_URL=postgresql://marketplace_user:local-dev-password-123@localhost:5432/marketplace_quota' \
		'' \
		'# =================================================================' \
		'# Azure Database Configuration (Production - DEV-06)' \
		'# =================================================================' \
		'AZURE_DATABASE_SERVER=to-be-filled-after-deployment' \
		'AZURE_DATABASE_NAME=marketplace_quota' \
		'AZURE_KEY_VAULT_NAME=to-be-filled-after-deployment' \
		'AZURE_RESOURCE_GROUP=rg-chatbottez-gpt-4-1-dev-06' \
		'AZURE_LOCATION=Canada Central' \
		'' \
		'# =================================================================' \
		'# Azure OpenAI Configuration (√Ä configurer)' \
		'# =================================================================' \
		'AZURE_OPENAI_API_KEY=to-be-filled-from-keyvault-or-shared-service' \
		'AZURE_OPENAI_ENDPOINT=https://to-be-filled.openai.azure.com/' \
		'AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4' \
		'AZURE_OPENAI_API_VERSION=2024-02-15-preview' \
		'' \
		'# =================================================================' \
		'# Microsoft Marketplace Configuration' \
		'# =================================================================' \
		'MARKETPLACE_API_BASE=https://marketplaceapi.microsoft.com' \
		'MARKETPLACE_API_KEY=to-be-filled-with-marketplace-key' \
		'MARKETPLACE_SUBSCRIPTION_API_VERSION=2018-08-31' \
		'MARKETPLACE_METERING_API_VERSION=2018-08-31' \
		'' \
		'# Quota Settings' \
		'DIMENSION_NAME=question' \
		'INCLUDED_QUOTA_PER_MONTH=300' \
		'OVERAGE_ENABLED=false' \
		'OVERAGE_PRICE_PER_QUESTION=0.01' \
		'' \
		'# =================================================================' \
		'# Monitoring & Logging' \
		'# =================================================================' \
		'LOG_LEVEL=info' \
		'AUDIT_LOG_ENABLED=true' \
		'APPLICATION_INSIGHTS_CONNECTION_STRING=to-be-filled-after-deployment' \
		'' \
		'# =================================================================' \
		'# Environment & Development' \
		'# =================================================================' \
		'NODE_ENV=development' \
		'PORT=3978' \
		'' \
		'# =================================================================' \
		'# Microsoft Bot Framework' \
		'# =================================================================' \
		'MicrosoftAppType=MultiTenant' \
		'MicrosoftAppId=to-be-filled-after-deployment' \
		'MicrosoftAppPassword=to-be-filled-after-deployment' \
		'BOT_PASSWORD=to-be-filled-after-deployment' \
		'' \
		'# =================================================================' \
		'# NOTES DE CONFIGURATION:' \
		'# =================================================================' \
		'# 1. Ce fichier est cr√©√© automatiquement avec des valeurs par d√©faut' \
		'# 2. Les valeurs "to-be-filled-*" doivent √™tre compl√©t√©es apr√®s le d√©ploiement' \
		'# 3. Les secrets doivent √™tre r√©cup√©r√©s depuis Azure Key Vault en production' \
		'# 4. JWT_SECRET_KEY et TENANT_ID sont d√©j√† configur√©s automatiquement' \
		'# 5. Utilisez '"'"'make deploy-dev06-full'"'"' pour d√©ployer l'"'"'infrastructure' \
		> env/.env.local
	@echo "$(GREEN)‚úÖ Fichier env/.env.local cr√©√© avec succ√®s!$(NC)"
	@echo "$(YELLOW)üîë JWT Secret Key g√©n√©r√©e automatiquement$(NC)"
	@echo "$(YELLOW)üè¢ Tenant ID configur√© automatiquement$(NC)"
	@echo "$(CYAN)üìù Prochaines √©tapes:$(NC)"
	@echo "  1. $(GREEN)make deploy-dev06-full$(NC) pour d√©ployer l'infrastructure"
	@echo "  2. Compl√©ter les valeurs manquantes apr√®s le d√©ploiement"
	@echo "  3. $(GREEN)make status$(NC) pour v√©rifier la configuration"

## environment: üåç Configuration de l'environnement de d√©veloppement
environment:
	@echo "$(CYAN)[1/3] Configuration de l'environnement...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/environment-setup.sh
	@$(SCRIPTS_DIR)/environment-setup.sh

## database: üíæ Configuration de la base de donn√©es
database:
	@echo "$(CYAN)[2/3] Configuration de la base de donn√©es...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/database-setup.sh
	@$(SCRIPTS_DIR)/database-setup.sh

## marketplace: üíº Configuration de l'API Marketplace
marketplace:
	@echo "$(CYAN)[3/3] Configuration Marketplace API...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/marketplace-setup.sh
	@$(SCRIPTS_DIR)/marketplace-setup.sh -C -n 'chatbottez-marketplace' -o marketplace.env

# ==================================================================
# üöÄ COMMANDES DE D√âPLOIEMENT
# ==================================================================

## deploy: üöÄ D√©ploiement de l'infrastructure Azure (m√©thode legacy)
deploy:
	@echo "$(CYAN)D√©ploiement de l'infrastructure Azure (m√©thode legacy)...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/azure-deploy.sh
	@$(SCRIPTS_DIR)/azure-deploy.sh --show-config --create-resource-group

## configure: ‚öôÔ∏è Configuration post-d√©ploiement Azure
configure:
	@echo "$(CYAN)Configuration post-d√©ploiement...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/azure-configure.sh
	@$(SCRIPTS_DIR)/azure-configure.sh

# ==================================================================
# üåü MICROSOFT 365 AGENTS TOOLKIT - D√âPLOIEMENT NATIF
# ==================================================================

## teamsfx-env-check: ‚úÖ V√©rifier l'environnement TeamsFx
teamsfx-env-check:
	@echo "$(CYAN)V√©rification de l'environnement Microsoft 365 Agents Toolkit...$(NC)"
	@echo ""
	@echo "$(YELLOW)üîç V√©rification des fichiers de configuration:$(NC)"
	@if [ -f "env/.env.dev06" ]; then \
		echo "  ‚úÖ env/.env.dev06 pr√©sent"; \
		if grep -q "AZURE_OPENAI_API_KEY=" env/.env.dev06 && [ "$$(grep -c '^AZURE_OPENAI_API_KEY=.*[a-zA-Z0-9]' env/.env.dev06)" -gt 0 ]; then \
			echo "  ‚úÖ Cl√© API OpenAI configur√©e"; \
		else \
			echo "  ‚ö†Ô∏è  Cl√© API OpenAI non configur√©e"; \
		fi; \
	else \
		echo "  ‚ùå env/.env.dev06 manquant"; \
		exit 1; \
	fi
	@if [ -f "m365agents.dev06.yml" ]; then \
		echo "  ‚úÖ m365agents.dev06.yml pr√©sent"; \
	else \
		echo "  ‚ùå m365agents.dev06.yml manquant"; \
		exit 1; \
	fi
	@if [ -f ".vscode/tasks.json" ]; then \
		echo "  ‚úÖ VS Code tasks configur√©es"; \
	else \
		echo "  ‚ö†Ô∏è  VS Code tasks non configur√©es"; \
	fi
	@echo ""
	@echo "$(YELLOW)üõ†Ô∏è  Outils TeamsFx:$(NC)"
	@if command -v teamsfx >/dev/null 2>&1; then \
		echo "  ‚úÖ TeamsFx CLI install√©"; \
		teamsfx --version | sed 's/^/    Version: /'; \
	else \
		echo "  ‚ùå TeamsFx CLI manquant"; \
		echo "    üì¶ Installation: npm install -g @microsoft/teamsfx-cli"; \
	fi
	@echo ""

## teamsfx-build: üî® Construire l'application pour TeamsFx
teamsfx-build:
	@echo "$(CYAN)Construction de l'application pour TeamsFx...$(NC)"
	@echo ""
	@echo "$(YELLOW)üì¶ Installation des d√©pendances...$(NC)"
	@npm install || { echo "$(RED)‚ùå √âchec installation npm$(NC)"; exit 1; }
	@echo ""
	@echo "$(YELLOW)üî® Compilation TypeScript...$(NC)"
	@npm run build || { echo "$(RED)‚ùå √âchec compilation TypeScript$(NC)"; exit 1; }
	@echo ""
	@echo "$(YELLOW)‚úÖ V√©rification des fichiers de sortie...$(NC)"
	@if [ -f "lib/src/index.js" ]; then \
		echo "  ‚úÖ lib/src/index.js g√©n√©r√©"; \
	else \
		echo "  ‚ùå lib/src/index.js manquant"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ Construction termin√©e!$(NC)"

## teamsfx-provision-dev06: üèóÔ∏è Provisionner l'infrastructure avec TeamsFx (DEV-06)
teamsfx-provision-dev06: teamsfx-env-check teamsfx-build
	@echo "$(CYAN)Provisionnement de l'infrastructure DEV-06 avec TeamsFx...$(NC)"
	@echo ""
	@echo "$(YELLOW)üèóÔ∏è D√©marrage du provisionnement...$(NC)"
	@if command -v teamsfx >/dev/null 2>&1; then \
		teamsfx provision --env dev06 --verbose || { \
			echo "$(RED)‚ùå √âchec du provisionnement TeamsFx$(NC)"; \
			echo "$(YELLOW)üí° V√©rifiez vos permissions Microsoft 365$(NC)"; \
			echo "$(YELLOW)üí° Utilisez: teamsfx account login$(NC)"; \
			exit 1; \
		}; \
	else \
		echo "$(RED)‚ùå TeamsFx CLI non install√©$(NC)"; \
		echo "$(YELLOW)üì¶ Installation: npm install -g @microsoft/teamsfx-cli$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ Provisionnement termin√©!$(NC)"

## teamsfx-deploy-dev06: üöÄ D√©ployer l'application avec TeamsFx (DEV-06)
teamsfx-deploy-dev06:
	@echo "$(CYAN)D√©ploiement de l'application DEV-06 avec TeamsFx...$(NC)"
	@echo ""
	@echo "$(YELLOW)üöÄ D√©marrage du d√©ploiement...$(NC)"
	@teamsfx deploy --env dev06 --verbose || { \
		echo "$(RED)‚ùå √âchec du d√©ploiement TeamsFx$(NC)"; \
		echo "$(YELLOW)üí° V√©rifiez les logs ci-dessus pour plus de d√©tails$(NC)"; \
		exit 1; \
	}
	@echo "$(GREEN)‚úÖ D√©ploiement termin√©!$(NC)"

## teamsfx-publish-dev06: üì± Publier l'application Teams (DEV-06)
teamsfx-publish-dev06: teamsfx-deploy-dev06
	@echo "$(CYAN)Publication de l'application Teams DEV-06...$(NC)"
	@echo ""
	@echo "$(YELLOW)üì± Publication dans le catalogue Teams...$(NC)"
	@teamsfx publish --env dev06 --verbose || { \
		echo "$(RED)‚ùå √âchec de la publication$(NC)"; \
		echo "$(YELLOW)üí° V√©rifiez vos permissions d'administration Teams$(NC)"; \
		exit 1; \
	}
	@echo "$(GREEN)‚úÖ Publication termin√©e!$(NC)"

## teamsfx-dev06-full: üéØ D√©ploiement complet TeamsFx DEV-06 (provision + deploy + publish)
teamsfx-dev06-full: teamsfx-provision-dev06 teamsfx-deploy-dev06 teamsfx-publish-dev06
	@echo ""
	@echo "$(GREEN)üéâ D√âPLOIEMENT TEAMSFX DEV-06 COMPLET TERMIN√â!$(NC)"
	@echo ""
	@echo "$(CYAN)üöÄ Votre application Microsoft Teams est d√©ploy√©e et publi√©e!$(NC)"
	@echo ""
	@echo "$(YELLOW)Lifecycle TeamsFx ex√©cut√©:$(NC)"
	@echo "  1. ‚úÖ $(GREEN)Provision$(NC) : Infrastructure provisionn√©e"
	@echo "  2. ‚úÖ $(GREEN)Deploy$(NC)    : Application d√©ploy√©e"
	@echo "  3. ‚úÖ $(GREEN)Publish$(NC)   : Application publi√©e dans Teams"
	@echo ""
	@echo "$(YELLOW)Prochaines √©tapes:$(NC)"
	@echo "  1. V√©rifier l'application: $(GREEN)make teamsfx-status-dev06$(NC)"
	@echo "  2. Tester dans Microsoft Teams"
	@echo "  3. Monitorer les logs: $(GREEN)make teamsfx-logs-dev06$(NC)"
	@echo ""

## teamsfx-status-dev06: üìä Statut de l'application TeamsFx DEV-06
teamsfx-status-dev06:
	@echo "$(CYAN)Statut de l'application TeamsFx DEV-06...$(NC)"
	@echo ""
	@echo "$(YELLOW)üìä Informations sur l'environnement:$(NC)"
	@if [ -f "env/.env.dev06" ]; then \
		echo "  ‚úÖ Configuration DEV-06 pr√©sente"; \
	else \
		echo "  ‚ùå Configuration DEV-06 manquante"; \
	fi
	@echo ""
	@echo "$(YELLOW)‚òÅÔ∏è  Ressources Azure:$(NC)"
	@az group show --name "rg-chatbottez-gpt-4-1-dev-06" --query "{Name:name, Location:location, State:properties.provisioningState}" --output table 2>/dev/null || echo "  ‚ùå Groupe de ressources non trouv√©"
	@echo ""
	@echo "$(YELLOW)üöÄ Application:$(NC)"
	@if az webapp show --name "app-chatbottez-gpt-4-1-dev-06" --resource-group "rg-chatbottez-gpt-4-1-dev-06" >/dev/null 2>&1; then \
		echo "  ‚úÖ App Service actif"; \
		az webapp show --name "app-chatbottez-gpt-4-1-dev-06" --resource-group "rg-chatbottez-gpt-4-1-dev-06" --query "{Name:name, State:state, URL:defaultHostName}" --output table; \
	else \
		echo "  ‚ùå App Service non trouv√©"; \
	fi

## teamsfx-logs-dev06: üìã Consulter les logs de l'application DEV-06
teamsfx-logs-dev06:
	@echo "$(CYAN)Consultation des logs DEV-06...$(NC)"
	@echo ""
	@echo "$(YELLOW)üìã Logs r√©cents de l'App Service:$(NC)"
	@az webapp log tail --name "app-chatbottez-gpt-4-1-dev-06" --resource-group "rg-chatbottez-gpt-4-1-dev-06" || { \
		echo "$(RED)‚ùå Impossible de r√©cup√©rer les logs$(NC)"; \
		echo "$(YELLOW)üí° V√©rifiez que l'application est d√©ploy√©e$(NC)"; \
	}

## teamsfx-preview-dev06: üëÄ Pr√©visualiser l'application dans Teams
teamsfx-preview-dev06:
	@echo "$(CYAN)Pr√©visualisation de l'application Teams DEV-06...$(NC)"
	@teamsfx preview --env dev06 || { \
		echo "$(RED)‚ùå √âchec de la pr√©visualisation$(NC)"; \
		echo "$(YELLOW)üí° Assurez-vous que l'application est d√©ploy√©e$(NC)"; \
	}

# ==================================================================
# ‚úÖ COMMANDES DE VALIDATION ET TESTS
# ==================================================================

## validate: ‚úÖ Validation compl√®te du syst√®me
validate:
	@echo "$(CYAN)Validation compl√®te du syst√®me...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/deployment-validate.sh
	@$(SCRIPTS_DIR)/deployment-validate.sh

## provision-dev06: ÔøΩÔ∏è Provisionner l'infrastructure DEV-06 (m√©thode legacy)
provision-dev06:
	@echo "$(CYAN)Provisionnement infrastructure DEV-06 (m√©thode legacy)...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/deploy-infrastructure-dev06.sh
	@$(SCRIPTS_DIR)/deploy-infrastructure-dev06.sh

## deploy-dev06: üöÄ D√©ployer l'application DEV-06 (m√©thode legacy)
deploy-dev06: provision-dev06
	@echo "$(CYAN)D√©ploiement de l'application vers DEV-06 (m√©thode legacy)...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/deploy-app-dev06.sh
	@$(SCRIPTS_DIR)/deploy-app-dev06.sh

## deploy-app-dev06: üöÄ D√©ployer l'application vers dev-06 (m√©thode legacy) - DEPRECATED
deploy-app-dev06:
	@echo "$(YELLOW)‚ö†Ô∏è  DEPRECATED: Utilisez 'make deploy-dev06' qui inclut provision + deploy$(NC)"
	@echo "$(CYAN)D√©ploiement de l'application vers dev-06 (m√©thode legacy)...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/deploy-app-dev06.sh
	@$(SCRIPTS_DIR)/deploy-app-dev06.sh

## test-config: üß™ Tester la configuration
test-config:
	@echo "$(CYAN)Test de la configuration...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/config-test.sh
	@$(SCRIPTS_DIR)/config-test.sh

## test-db: üíæ Tester la connexion base de donn√©es
test-db:
	@echo "$(CYAN)Test de la connexion base de donn√©es...$(NC)"
	@if [ -f ".env.local" ]; then \
		npm run test:db || echo "$(YELLOW)‚ö†Ô∏è  Test DB √©chou√© - v√©rifiez DATABASE_URL dans .env.local$(NC)"; \
	else \
		echo "$(RED)‚ùå Fichier .env.local non trouv√©. Ex√©cutez d'abord: make setup$(NC)"; \
	fi

## status-deployment: üìä V√©rifier l'√©tat des d√©ploiements
status-deployment:
	@echo "$(CYAN)V√©rification de l'√©tat des d√©ploiements Azure...$(NC)"
	@echo ""
	@echo "$(YELLOW)üìä D√âPLOIEMENTS EN COURS:$(NC)"
	@az deployment sub list --query "[?properties.provisioningState=='Running'].{Name:name, State:properties.provisioningState, Started:properties.timestamp, Location:location}" --output table 2>/dev/null || echo "$(RED)‚ùå Erreur lors de la r√©cup√©ration des d√©ploiements$(NC)"
	@echo ""
	@echo "$(YELLOW)üìä DERNIERS D√âPLOIEMENTS (Tous √©tats):$(NC)"
	@az deployment sub list --query "[?contains(name, 'complete-infrastructure')].{Name:name, State:properties.provisioningState, Started:properties.timestamp}" --output table --top 10 2>/dev/null || echo "$(RED)‚ùå Erreur lors de la r√©cup√©ration des d√©ploiements$(NC)"
	@echo ""
	@echo "$(YELLOW)üèóÔ∏è RESOURCE GROUPS CHATBOTTEZ:$(NC)"
	@az group list --query "[?contains(name, 'chatbottez')].{Name:name, Location:location, State:properties.provisioningState}" --output table 2>/dev/null || echo "$(RED)‚ùå Erreur lors de la r√©cup√©ration des groupes de ressources$(NC)"
	@echo ""
	@echo "$(YELLOW)üí° COMMANDES UTILES:$(NC)"
	@echo "  ‚Ä¢ Surveiller un d√©ploiement: $(GREEN)az deployment sub show --name <DEPLOYMENT_NAME>$(NC)"
	@echo "  ‚Ä¢ Voir les erreurs: $(GREEN)az deployment sub show --name <DEPLOYMENT_NAME> --query 'properties.error'$(NC)"
	@echo "  ‚Ä¢ Lister les ressources: $(GREEN)az resource list --resource-group <RG_NAME> --output table$(NC)"

# ==================================================================
# üßπ COMMANDES UTILITAIRES
# ==================================================================

## clean: üßπ Nettoyer les fichiers temporaires
clean:
	@echo "$(CYAN)Nettoyage des fichiers temporaires...$(NC)"
	@rm -f *.tmp
	@rm -f *.backup
	@rm -f temp_deploy.ps1
	@rm -f deployment-outputs.json
	@rm -f marketplace-temp.env
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

## scripts-cleanup: üßπ Nettoyer les scripts obsol√®tes
scripts-cleanup:
	@echo "$(CYAN)Nettoyage des scripts obsol√®tes...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/scripts-cleanup.sh
	@$(SCRIPTS_DIR)/scripts-cleanup.sh

## reset: üîÑ RESET COMPLET - Remettre tout √† l'√©tat neuf
reset:
	@echo ""
	@echo "$(RED)‚ö†Ô∏è  ATTENTION: RESET COMPLET DU PROJET$(NC)"
	@echo "$(RED)üî• Cette commande va supprimer D√âFINITIVEMENT:$(NC)"
	@echo "$(RED)   ‚Ä¢ Tous les groupes de ressources Azure$(NC)"
	@echo "$(RED)   ‚Ä¢ Toutes les configurations TeamsFx$(NC)"
	@echo "$(RED)   ‚Ä¢ Tous les fichiers temporaires$(NC)"
	@echo "$(RED)   ‚Ä¢ Toutes les ressources soft-deleted$(NC)"
	@echo ""
	@echo "$(YELLOW)üö® CETTE ACTION EST IRR√âVERSIBLE!$(NC)"
	@echo ""
	@echo "$(CYAN)Ex√©cution du script de reset complet...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/reset-complete.sh
	@$(SCRIPTS_DIR)/reset-complete.sh

# ==================================================================
# üîç COMMANDES DE DIAGNOSTIC
# ==================================================================

## status: üìä Afficher le statut du syst√®me
status:
	@echo ""
	@echo "$(CYAN)=================================================================$(NC)"
	@echo "$(CYAN)üìä STATUT DU SYST√àME$(NC)"
	@echo "$(CYAN)=================================================================$(NC)"
	@echo ""
	@echo "$(YELLOW)üìÅ Fichiers de configuration:$(NC)"
	@if [ -f "env/.env.local" ]; then echo "  ‚úÖ env/.env.local"; else echo "  ‚ùå env/.env.local (manquant)"; fi
	@if [ -f "$(CONFIG_DIR)/azure.env" ]; then echo "  ‚úÖ config/azure.env"; else echo "  ‚ùå config/azure.env (manquant)"; fi
	@if [ -f "marketplace.env" ]; then echo "  ‚úÖ marketplace.env"; else echo "  ‚ö†Ô∏è  marketplace.env (optionnel)"; fi
	@echo ""
	@echo "$(YELLOW)üõ†Ô∏è  Outils syst√®me:$(NC)"
	@if command -v az >/dev/null 2>&1; then echo "  ‚úÖ Azure CLI"; else echo "  ‚ùå Azure CLI (requis)"; fi
	@if command -v node >/dev/null 2>&1; then echo "  ‚úÖ Node.js"; else echo "  ‚ùå Node.js (requis)"; fi
	@if command -v npm >/dev/null 2>&1; then echo "  ‚úÖ npm"; else echo "  ‚ùå npm (requis)"; fi
	@echo ""
	@echo "$(YELLOW)‚òÅÔ∏è  Azure:$(NC)"
	@if az account show >/dev/null 2>&1; then \
		echo "  ‚úÖ Connect√© √† Azure"; \
		az account show --query "name" -o tsv | sed 's/^/    Abonnement: /'; \
	else \
		echo "  ‚ùå Non connect√© √† Azure (az login requis)"; \
	fi
	@echo ""
	@echo "$(YELLOW)üöÄ D√©ploiements en cours:$(NC)"
	@if az deployment sub list --query "[?properties.provisioningState=='Running' && contains(name, 'chatbottez')]" --output table >/dev/null 2>&1; then \
		az deployment sub list --query "[?properties.provisioningState=='Running' && contains(name, 'chatbottez')].{Name:name, State:properties.provisioningState}" --output table 2>/dev/null || echo "  ‚úÖ Aucun d√©ploiement en cours"; \
	else \
		echo "  ‚úÖ Aucun d√©ploiement en cours"; \
	fi
	@echo ""
	@echo "$(YELLOW)üì¶ Resource Groups ChatBottez:$(NC)"
	@az group list --query "[?contains(name, 'chatbottez')].{Name:name, Location:location}" --output table 2>/dev/null || echo "  ‚ùå Erreur lors de la r√©cup√©ration"
	@echo ""

# ==================================================================
# üéõÔ∏è COMMANDES AVANC√âES
# ==================================================================

## deploy-dev06-full: üéØ D√©ploiement complet DEV-06 (provision + deploy) - M√âTHODE LEGACY
deploy-dev06-full: deploy-dev06
	@echo ""
	@echo "$(GREEN)üéâ D√âPLOIEMENT COMPLET DEV-06 TERMIN√â! (M√©thode Legacy)$(NC)"
	@echo ""
	@echo "$(CYAN)üöÄ Votre syst√®me DEV-06 est maintenant d√©ploy√©!$(NC)"
	@echo ""
	@echo "$(YELLOW)Lifecycle Legacy ex√©cut√©:$(NC)"
	@echo "  1. ‚úÖ $(GREEN)Provision$(NC) : Infrastructure d√©ploy√©e"
	@echo "  2. ‚úÖ $(GREEN)Deploy$(NC)    : Application d√©ploy√©e"
	@echo ""
	@echo "$(YELLOW)Prochaines √©tapes:$(NC)"
	@echo "  1. V√©rifier l'application: $(GREEN)make status$(NC)"
	@echo "  2. Configurer les variables d'environnement via Azure Portal"
	@echo "  3. Tester les fonctionnalit√©s Microsoft Teams"
	@echo ""
	@echo "$(BLUE)üí° Pour utiliser la m√©thode native TeamsFx: $(GREEN)make teamsfx-dev06-full$(NC)"
	@echo ""

# ==================================================================
# üåü MICROSOFT 365 AGENTS TOOLKIT - UTILITAIRES
# ==================================================================

## teamsfx-install: üì¶ Installer TeamsFx CLI
teamsfx-install:
	@echo "$(CYAN)Installation de TeamsFx CLI...$(NC)"
	@npm install -g @microsoft/teamsfx-cli || { \
		echo "$(RED)‚ùå √âchec de l'installation$(NC)"; \
		echo "$(YELLOW)üí° Essayez avec sudo: sudo npm install -g @microsoft/teamsfx-cli$(NC)"; \
		exit 1; \
	}
	@echo "$(GREEN)‚úÖ TeamsFx CLI install√©!$(NC)"
	@teamsfx --version

## teamsfx-login: üîê Se connecter aux services Microsoft 365
teamsfx-login:
	@echo "$(CYAN)Connexion aux services Microsoft 365...$(NC)"
	@echo ""
	@echo "$(YELLOW)üîê Connexion Azure...$(NC)"
	@teamsfx account login azure || { \
		echo "$(RED)‚ùå √âchec connexion Azure$(NC)"; \
		exit 1; \
	}
	@echo ""
	@echo "$(YELLOW)‚öôÔ∏è  Configuration de la subscription Azure...$(NC)"
	@az account set --subscription "0f1323ea-0f29-4187-9872-e1cf15d677de" || { \
		echo "$(RED)‚ùå √âchec configuration subscription$(NC)"; \
		echo "$(YELLOW)ÔøΩ V√©rifiez que vous avez acc√®s √† Microsoft Azure Sponsorship$(NC)"; \
		exit 1; \
	}
	@echo "$(GREEN)‚úÖ Subscription configur√©e: Microsoft Azure Sponsorship$(NC)"
	@echo ""
	@echo "$(YELLOW)ÔøΩüîê Connexion Microsoft 365...$(NC)"
	@teamsfx account login m365 || { \
		echo "$(RED)‚ùå √âchec connexion M365$(NC)"; \
		echo "$(YELLOW)üí° V√©rifiez vos permissions d'administration Teams$(NC)"; \
		exit 1; \
	}
	@echo ""
	@echo "$(YELLOW)üîç V√©rification des comptes configur√©s...$(NC)"
	@az account show --query "{subscription: name, id: id, tenant: tenantId}" -o table
	@echo ""
	@teamsfx account show | head -10
	@echo "$(GREEN)‚úÖ Connexions √©tablies avec Microsoft Azure Sponsorship!$(NC)"

## teamsfx-logout: üö™ Se d√©connecter des services
teamsfx-logout:
	@echo "$(CYAN)D√©connexion des services...$(NC)"
	@teamsfx account logout azure
	@teamsfx account logout m365
	@echo "$(GREEN)‚úÖ D√©connexion termin√©e$(NC)"

## teamsfx-account-status: üë§ V√©rifier le statut des comptes
teamsfx-account-status:
	@echo "$(CYAN)Statut des comptes Microsoft 365 Agents Toolkit...$(NC)"
	@echo ""
	@echo "$(YELLOW)üîç Azure CLI:$(NC)"
	@az account show --query "{subscription: name, id: id, tenant: tenantId}" -o table || { \
		echo "$(RED)‚ùå Azure CLI non connect√©$(NC)"; \
	}
	@echo ""
	@echo "$(YELLOW)üîç TeamsFx:$(NC)"
	@teamsfx account show || { \
		echo "$(RED)‚ùå TeamsFx non connect√©$(NC)"; \
	}

## teamsfx-set-subscription: ‚öôÔ∏è Configurer la subscription Azure Sponsorship
teamsfx-set-subscription:
	@echo "$(CYAN)Configuration de la subscription Azure...$(NC)"
	@echo ""
	@echo "$(YELLOW)üîß D√©finition de la subscription: $(AZURE_SUBSCRIPTION_NAME)$(NC)"
	@az account set --subscription "$(AZURE_SUBSCRIPTION_ID)" || { \
		echo "$(RED)‚ùå √âchec configuration subscription$(NC)"; \
		echo "$(YELLOW)üí° V√©rifiez que vous avez acc√®s √† $(AZURE_SUBSCRIPTION_NAME)$(NC)"; \
		echo "$(YELLOW)üí° ID: $(AZURE_SUBSCRIPTION_ID)$(NC)"; \
		exit 1; \
	}
	@echo "$(GREEN)‚úÖ Subscription configur√©e: $(AZURE_SUBSCRIPTION_NAME)$(NC)"
	@echo ""
	@echo "$(YELLOW)üîç V√©rification:$(NC)"
	@az account show --query "{subscription: name, id: id, tenant: tenantId}" -o table
	@echo "$(YELLOW)‚òÅÔ∏è  Compte Azure:$(NC)"
	@teamsfx account show azure || echo "  ‚ùå Non connect√©"
	@echo ""
	@echo "$(YELLOW)üè¢ Compte Microsoft 365:$(NC)"
	@teamsfx account show m365 || echo "  ‚ùå Non connect√©"

## teamsfx-clean-dev06: üßπ Nettoyer l'environnement TeamsFx DEV-06
teamsfx-clean-dev06:
	@echo "$(CYAN)Nettoyage de l'environnement TeamsFx DEV-06...$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  Cette action va supprimer les ressources DEV-06$(NC)"
	@read -p "Continuer? (y/N): " confirm; \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		echo "$(CYAN)üßπ Suppression des ressources...$(NC)"; \
		az group delete --name "rg-chatbottez-gpt-4-1-dev-06" --yes --no-wait || echo "$(YELLOW)‚ö†Ô∏è  Groupe de ressources non trouv√©$(NC)"; \
		echo "$(GREEN)‚úÖ Nettoyage initi√©$(NC)"; \
	else \
		echo "$(YELLOW)‚ùå Nettoyage annul√©$(NC)"; \
	fi

## teamsfx-env-create-dev06: üìù Cr√©er la configuration d'environnement DEV-06
teamsfx-env-create-dev06:
	@echo "$(CYAN)Cr√©ation de la configuration d'environnement DEV-06...$(NC)"
	@if [ ! -f "env/.env.dev06" ]; then \
		echo "$(YELLOW)üìù Cr√©ation du fichier env/.env.dev06...$(NC)"; \
		mkdir -p env; \
		printf '%s\n' \
			'# =================================================================' \
			'# Microsoft 365 Agents Toolkit - Configuration DEV-06' \
			'# =================================================================' \
			'# ‚ö†Ô∏è IMPORTANT: Ce fichier contient des secrets - Ne jamais commiter !' \
			"# G√©n√©r√© automatiquement le $$(date '+%Y-%m-%d %H:%M:%S')" \
			'' \
			'# =================================================================' \
			'# TeamsFx Environment Configuration' \
			'# =================================================================' \
			'TEAMSFX_ENV=dev06' \
			'APP_NAME_SUFFIX=dev06' \
			'' \
			'# =================================================================' \
			'# Azure OpenAI Configuration (Partag√©)' \
			'# =================================================================' \
			'AZURE_OPENAI_API_KEY=to-be-filled-manually' \
			'AZURE_OPENAI_ENDPOINT=https://openai-shared-canada-central.openai.azure.com/' \
			'AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4' \
			'AZURE_OPENAI_API_VERSION=2024-02-15-preview' \
			'' \
			'# =================================================================' \
			'# Azure Configuration (Auto-filled by TeamsFx)' \
			'# =================================================================' \
			'AZURE_SUBSCRIPTION_ID=to-be-filled-by-teamsfx' \
			'AZURE_RESOURCE_GROUP_NAME=rg-chatbottez-gpt-4-1-dev-06' \
			'AZURE_LOCATION=Canada Central' \
			'' \
			'# =================================================================' \
			'# Bot Configuration (Auto-filled by TeamsFx)' \
			'# =================================================================' \
			'BOT_ID=to-be-filled-by-teamsfx' \
			'BOT_PASSWORD=to-be-filled-by-teamsfx' \
			'TEAMS_APP_ID=to-be-filled-by-teamsfx' \
			'BOT_ENDPOINT=to-be-filled-by-teamsfx' \
			'BOT_DOMAIN=to-be-filled-by-teamsfx' \
			'' \
			'# =================================================================' \
			'# Application Configuration' \
			'# =================================================================' \
			'PORT=3978' \
			'NODE_ENV=production' \
			'LOG_LEVEL=info' \
			> env/.env.dev06; \
		echo "$(GREEN)‚úÖ Fichier env/.env.dev06 cr√©√©$(NC)"; \
		echo "$(YELLOW)‚ö†Ô∏è  N'oubliez pas de configurer AZURE_OPENAI_API_KEY$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Le fichier env/.env.dev06 existe d√©j√†$(NC)"; \
	fi
	@if [ ! -f "m365agents.dev06.yml" ]; then \
		echo "$(YELLOW)üìù Cr√©ation du fichier m365agents.dev06.yml...$(NC)"; \
		printf '%s\n' \
			'# =================================================================' \
			'# Microsoft 365 Agents Toolkit - Configuration de d√©ploiement DEV-06' \
			'# =================================================================' \
			'# Fichier de configuration TeamsFx pour l'"'"'environnement DEV-06' \
			'# =================================================================' \
			'' \
			'version: 2.0.0' \
			'' \
			'environmentFolderPath: ./env' \
			'' \
			'provision:' \
			'  - uses: teamsApp/create' \
			'    with:' \
			'      name: ChatBottez-GPT-4.1-DEV-06' \
			'    writeToEnvironmentFile:' \
			'      teamsAppId: TEAMS_APP_ID' \
			'' \
			'  - uses: arm/deploy' \
			'    with:' \
			'      subscriptionId: $${{AZURE_SUBSCRIPTION_ID}}' \
			'      resourceGroupName: rg-chatbottez-gpt-4-1-dev-06' \
			'      templates:' \
			'        - path: ./infra/complete-infrastructure-dev06.bicep' \
			'          parameters: ./infra/complete-infrastructure-dev06.parameters.json' \
			'          deploymentName: chatbottez-infrastructure-dev06' \
			'      bicepCliVersion: v0.15.31' \
			'' \
			'deploy:' \
			'  - uses: azureAppService/zipDeploy' \
			'    with:' \
			'      artifactFolder: .' \
			'      ignoreFile: .webappignore' \
			'      resourceId: $${{AZURE_APP_SERVICE_RESOURCE_ID}}' \
			> m365agents.dev06.yml; \
		echo "$(GREEN)‚úÖ Fichier m365agents.dev06.yml cr√©√©$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Le fichier m365agents.dev06.yml existe d√©j√†$(NC)"; \
	fi

## purge-dev06: ‚ôª Purger ressources soft-deleted (APIM / KeyVault) pour DEV-06
purge-dev06:
	@echo "$(CYAN)Purge soft-deleted ressources DEV-06...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/purge-infra-dev-06.sh
	@$(SCRIPTS_DIR)/purge-infra-dev-06.sh --auto

## bot-credentials-setup-dev06: üîê R√©g√©n√©rer et configurer les identifiants Bot (App Registration) pour DEV-06
bot-credentials-setup-dev06:
	@echo "$(CYAN)Reset & configuration des credentials Bot (dev-06)...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/bot-credentials-setup-dev06.sh
	@$(SCRIPTS_DIR)/bot-credentials-setup-dev06.sh || { echo "$(RED)√âchec g√©n√©ration credentials Bot$(NC)"; exit 1; }

## check-deps: üîç V√©rifier les d√©pendances
check-deps:
	@echo "$(CYAN)V√©rification des d√©pendances...$(NC)"
	@echo ""
	@echo "$(YELLOW)D√©pendances syst√®me:$(NC)"
	@command -v az >/dev/null 2>&1 && echo "  ‚úÖ Azure CLI" || echo "  ‚ùå Azure CLI manquant"
	@command -v node >/dev/null 2>&1 && echo "  ‚úÖ Node.js" || echo "  ‚ùå Node.js manquant"
	@command -v npm >/dev/null 2>&1 && echo "  ‚úÖ npm" || echo "  ‚ùå npm manquant"
	@command -v git >/dev/null 2>&1 && echo "  ‚úÖ Git" || echo "  ‚ùå Git manquant"
	@echo ""
	@echo "$(YELLOW)D√©pendances Node.js:$(NC)"
	@if [ -f "package.json" ]; then \
		if [ -d "node_modules" ]; then \
			echo "  ‚úÖ node_modules install√©"; \
		else \
			echo "  ‚ö†Ô∏è  node_modules manquant - ex√©cutez: npm install"; \
		fi; \
	else \
		echo "  ‚ùå package.json non trouv√©"; \
	fi

# Valeur par d√©faut
.DEFAULT_GOAL := help
