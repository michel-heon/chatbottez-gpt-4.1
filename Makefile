# =================================================================
# Makefile - Microsoft Marketplace Quota Management System
# Orchestration des scripts de d√©ploiement et configuration
# =================================================================

.PHONY: help setup deploy configure validate clean test-config test-db all

# Configuration
SCRIPTS_DIR := scripts
CONFIG_DIR := config

# Couleurs pour l'output
CYAN := \033[0;36m
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m

# ==================================================================
# üéØ COMMANDES PRINCIPALES
# ==================================================================

## help: üìã Afficher cette aide
help:
	@echo ""
	@echo "$(CYAN)=================================================================$(NC)"
	@echo "$(CYAN)Microsoft Marketplace Quota Management System$(NC)"
	@echo "$(CYAN)=================================================================$(NC)"
	@echo ""
	@echo "$(YELLOW)üéØ COMMANDES PRINCIPALES:$(NC)"
	@echo ""
	@echo "  $(GREEN)make setup$(NC)        - üîß Configuration initiale compl√®te"
	@echo "  $(GREEN)make deploy$(NC)       - üöÄ D√©ploiement Azure infrastructure"
	@echo "  $(GREEN)make configure$(NC)    - ‚öôÔ∏è  Configuration post-d√©ploiement"
	@echo "  $(GREEN)make validate$(NC)     - ‚úÖ Validation compl√®te du syst√®me"
	@echo "  $(GREEN)make all$(NC)          - üéâ Processus complet (setup + deploy + configure + validate)"
	@echo ""
	@echo "$(YELLOW)üîß COMMANDES DE D√âVELOPPEMENT:$(NC)"
	@echo ""
	@echo "  $(GREEN)make test-config$(NC)  - üß™ Tester la configuration"
	@echo "  $(GREEN)make test-db$(NC)      - üíæ Tester la connexion base de donn√©es"
	@echo "  $(GREEN)make clean$(NC)        - üßπ Nettoyer les fichiers temporaires"
	@echo "  $(GREEN)make status$(NC)       - üìä Afficher le statut du syst√®me"
	@echo "  $(GREEN)make components$(NC)   - üìã Afficher les composants Azure"
	@echo ""
	@echo "$(YELLOW)üìã COMMANDES INDIVIDUELLES:$(NC)"
	@echo ""
	@echo "  $(GREEN)make environment$(NC)  - üåç Configuration environnement seulement"
	@echo "  $(GREEN)make database$(NC)     - üíæ Configuration base de donn√©es seulement"
	@echo "  $(GREEN)make marketplace$(NC)  - üíº Configuration Marketplace API seulement"
	@echo ""
	@echo "$(YELLOW)‚ÑπÔ∏è  PR√âREQUIS:$(NC)"
	@echo "  - Azure CLI install√© et connect√© (az login)"
	@echo "  - Node.js et npm install√©s"
	@echo "  - WSL/Bash disponible"
	@echo ""

## all: üéâ Processus de d√©ploiement complet
all: setup deploy configure validate
	@echo ""
	@echo "$(GREEN)=================================================================$(NC)"
	@echo "$(GREEN)üéâ D√âPLOIEMENT COMPLET TERMIN√â AVEC SUCC√àS!$(NC)"
	@echo "$(GREEN)=================================================================$(NC)"
	@echo ""
	@echo "$(CYAN)üöÄ Votre syst√®me est maintenant pr√™t √† utiliser!$(NC)"
	@echo ""
	@echo "$(YELLOW)Prochaines √©tapes:$(NC)"
	@echo "  1. D√©marrer l'application: $(GREEN)npm run dev$(NC)"
	@echo "  2. Tester les fonctionnalit√©s Microsoft Teams"
	@echo "  3. V√©rifier les quotas dans Azure Portal"
	@echo ""

# ==================================================================
# üîß COMMANDES DE CONFIGURATION
# ==================================================================

## setup: üîß Configuration initiale compl√®te (environnement + database + marketplace)
setup: environment database marketplace
	@echo ""
	@echo "$(GREEN)‚úÖ Configuration initiale termin√©e!$(NC)"
	@echo "$(YELLOW)Prochaine √©tape: $(GREEN)make deploy$(NC)"

## environment: üåç Configuration de l'environnement de d√©veloppement
environment:
	@echo "$(CYAN)[1/3] Configuration de l'environnement...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/environment-setup.sh
	@$(SCRIPTS_DIR)/environment-setup.sh

## database: üíæ Configuration de la base de donn√©es
database:
	@echo "$(CYAN)[2/3] Configuration de la base de donn√©es...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/database-setup.sh
	@$(SCRIPTS_DIR)/database-setup.sh

## marketplace: üíº Configuration de l'API Marketplace
marketplace:
	@echo "$(CYAN)[3/3] Configuration Marketplace API...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/marketplace-setup.sh
	@$(SCRIPTS_DIR)/marketplace-setup.sh -C -n 'chatbottez-marketplace' -o marketplace.env

# ==================================================================
# üöÄ COMMANDES DE D√âPLOIEMENT
# ==================================================================

## deploy: üöÄ D√©ploiement de l'infrastructure Azure
deploy:
	@echo "$(CYAN)D√©ploiement de l'infrastructure Azure...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/azure-deploy.sh
	@$(SCRIPTS_DIR)/azure-deploy.sh --show-config --create-resource-group

## configure: ‚öôÔ∏è Configuration post-d√©ploiement Azure
configure:
	@echo "$(CYAN)Configuration post-d√©ploiement...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/azure-configure.sh
	@$(SCRIPTS_DIR)/azure-configure.sh

# ==================================================================
# ‚úÖ COMMANDES DE VALIDATION ET TESTS
# ==================================================================

## validate: ‚úÖ Validation compl√®te du syst√®me
validate:
	@echo "$(CYAN)Validation compl√®te du syst√®me...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/deployment-validate.sh
	@$(SCRIPTS_DIR)/deployment-validate.sh

## test-config: üß™ Tester la configuration
test-config:
	@echo "$(CYAN)Test de la configuration...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/config-test.sh
	@$(SCRIPTS_DIR)/config-test.sh

## test-db: üíæ Tester la connexion base de donn√©es
test-db:
	@echo "$(CYAN)Test de la connexion base de donn√©es...$(NC)"
	@if [ -f ".env.local" ]; then \
		npm run test:db || echo "$(YELLOW)‚ö†Ô∏è  Test DB √©chou√© - v√©rifiez DATABASE_URL dans .env.local$(NC)"; \
	else \
		echo "$(RED)‚ùå Fichier .env.local non trouv√©. Ex√©cutez d'abord: make setup$(NC)"; \
	fi

# ==================================================================
# üßπ COMMANDES UTILITAIRES
# ==================================================================

## clean: üßπ Nettoyer les fichiers temporaires
clean:
	@echo "$(CYAN)Nettoyage des fichiers temporaires...$(NC)"
	@rm -f *.tmp
	@rm -f *.backup
	@rm -f temp_deploy.ps1
	@rm -f deployment-outputs.json
	@rm -f marketplace-temp.env
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

## scripts-cleanup: üßπ Nettoyer les scripts obsol√®tes
scripts-cleanup:
	@echo "$(CYAN)Nettoyage des scripts obsol√®tes...$(NC)"
	@chmod +x $(SCRIPTS_DIR)/scripts-cleanup.sh
	@$(SCRIPTS_DIR)/scripts-cleanup.sh

# ==================================================================
# üîç COMMANDES DE DIAGNOSTIC
# ==================================================================

## status: üìä Afficher le statut du syst√®me
status:
	@echo ""
	@echo "$(CYAN)=================================================================$(NC)"
	@echo "$(CYAN)üìä STATUT DU SYST√àME$(NC)"
	@echo "$(CYAN)=================================================================$(NC)"
	@echo ""
	@echo "$(YELLOW)üìÅ Fichiers de configuration:$(NC)"
	@if [ -f "env/.env.local" ]; then echo "  ‚úÖ env/.env.local"; else echo "  ‚ùå env/.env.local (manquant)"; fi
	@if [ -f "$(CONFIG_DIR)/azure.env" ]; then echo "  ‚úÖ config/azure.env"; else echo "  ‚ùå config/azure.env (manquant)"; fi
	@if [ -f "marketplace.env" ]; then echo "  ‚úÖ marketplace.env"; else echo "  ‚ö†Ô∏è  marketplace.env (optionnel)"; fi
	@echo ""
	@echo "$(YELLOW)üõ†Ô∏è  Outils syst√®me:$(NC)"
	@if command -v az >/dev/null 2>&1; then echo "  ‚úÖ Azure CLI"; else echo "  ‚ùå Azure CLI (requis)"; fi
	@if command -v node >/dev/null 2>&1; then echo "  ‚úÖ Node.js"; else echo "  ‚ùå Node.js (requis)"; fi
	@if command -v npm >/dev/null 2>&1; then echo "  ‚úÖ npm"; else echo "  ‚ùå npm (requis)"; fi
	@echo ""
	@echo "$(YELLOW)‚òÅÔ∏è  Azure:$(NC)"
	@if az account show >/dev/null 2>&1; then \
		echo "  ‚úÖ Connect√© √† Azure"; \
		az account show --query "name" -o tsv | sed 's/^/    Abonnement: /'; \
	else \
		echo "  ‚ùå Non connect√© √† Azure (az login requis)"; \
	fi
	@echo ""

## info: ‚ÑπÔ∏è Informations sur l'architecture
info:
	@echo ""
	@echo "$(CYAN)=================================================================$(NC)"
	@echo "$(CYAN)‚ÑπÔ∏è  INFORMATIONS ARCHITECTURE$(NC)"
	@echo "$(CYAN)=================================================================$(NC)"
	@echo ""
	@echo "$(YELLOW)üèóÔ∏è  Composants principaux:$(NC)"
	@echo "  ‚Ä¢ Microsoft Teams Bot (Teams AI Library)"
	@echo "  ‚Ä¢ Azure API Management (Quota enforcement)"
	@echo "  ‚Ä¢ PostgreSQL Database (Azure Flexible Server)"
	@echo "  ‚Ä¢ Azure Key Vault (Secrets management)"
	@echo "  ‚Ä¢ Marketplace Integration (SaaS + Metering)"
	@echo ""
	@echo "$(YELLOW)üìã Scripts disponibles:$(NC)"
	@ls -1 $(SCRIPTS_DIR)/*.sh | sed 's/^/  ‚Ä¢ /'
	@echo ""
	@echo "$(YELLOW)üìñ Documentation:$(NC)"
	@echo "  ‚Ä¢ Diagramme: docs/architecture-diagram.drawio"
	@echo "  ‚Ä¢ Composants Azure: docs/azure-components.md"
	@echo "  ‚Ä¢ D√©ploiement: DEPLOYMENT_SUMMARY.md"
	@echo "  ‚Ä¢ Migration: MIGRATION_COMPLETED.md"
	@echo ""

## components: üìã Afficher la liste des composants Azure
components:
	@echo ""
	@echo "$(CYAN)=================================================================$(NC)"
	@echo "$(CYAN)üìã COMPOSANTS AZURE$(NC)"
	@echo "$(CYAN)=================================================================$(NC)"
	@echo ""
	@if [ -f "docs/azure-components.md" ]; then \
		echo "$(GREEN)üìÑ Documentation compl√®te disponible dans: docs/azure-components.md$(NC)"; \
		echo ""; \
		echo "$(YELLOW)‚úÖ Composants d√©ploy√©s:$(NC)"; \
		echo "  ‚Ä¢ Resource Group (rg-chatbottez-gpt-4-1-dev-02)"; \
		echo "  ‚Ä¢ PostgreSQL Flexible Server"; \
		echo "  ‚Ä¢ Key Vault"; \
		echo ""; \
		echo "$(YELLOW)üîÑ Composants √† d√©ployer (Priorit√© Haute):$(NC)"; \
		echo "  ‚Ä¢ Bot Service"; \
		echo "  ‚Ä¢ App Service Plan"; \
		echo "  ‚Ä¢ App Service (Node.js)"; \
		echo "  ‚Ä¢ Application Registration"; \
		echo ""; \
		echo "$(YELLOW)üîÑ Composants √† d√©ployer (Priorit√© Moyenne):$(NC)"; \
		echo "  ‚Ä¢ API Management"; \
		echo "  ‚Ä¢ Application Insights"; \
		echo "  ‚Ä¢ Storage Account"; \
		echo "  ‚Ä¢ Marketplace SaaS Offer"; \
		echo ""; \
		echo "$(CYAN)üí∞ Co√ªt estim√© total: ~110.50 CAD/mois$(NC)"; \
		echo "$(CYAN)üìñ Voir le d√©tail complet: docs/azure-components.md$(NC)"; \
	else \
		echo "$(RED)‚ùå Documentation des composants non trouv√©e$(NC)"; \
	fi
	@echo ""

# ==================================================================
# üéõÔ∏è COMMANDES AVANC√âES
# ==================================================================

## dev-setup: üßë‚Äçüíª Configuration rapide pour d√©veloppement
dev-setup: environment test-config
	@echo "$(GREEN)‚úÖ Configuration d√©veloppement pr√™te!$(NC)"
	@echo "$(YELLOW)Pour d√©marrer: $(GREEN)npm run dev$(NC)"

## prod-deploy: üè≠ D√©ploiement production (avec validation)
prod-deploy: setup deploy configure validate
	@echo ""
	@echo "$(GREEN)üè≠ D√©ploiement production termin√©!$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  N'oubliez pas de configurer le monitoring en production$(NC)"

## check-deps: üîç V√©rifier les d√©pendances
check-deps:
	@echo "$(CYAN)V√©rification des d√©pendances...$(NC)"
	@echo ""
	@echo "$(YELLOW)D√©pendances syst√®me:$(NC)"
	@command -v az >/dev/null 2>&1 && echo "  ‚úÖ Azure CLI" || echo "  ‚ùå Azure CLI manquant"
	@command -v node >/dev/null 2>&1 && echo "  ‚úÖ Node.js" || echo "  ‚ùå Node.js manquant"
	@command -v npm >/dev/null 2>&1 && echo "  ‚úÖ npm" || echo "  ‚ùå npm manquant"
	@command -v git >/dev/null 2>&1 && echo "  ‚úÖ Git" || echo "  ‚ùå Git manquant"
	@echo ""
	@echo "$(YELLOW)D√©pendances Node.js:$(NC)"
	@if [ -f "package.json" ]; then \
		if [ -d "node_modules" ]; then \
			echo "  ‚úÖ node_modules install√©"; \
		else \
			echo "  ‚ö†Ô∏è  node_modules manquant - ex√©cutez: npm install"; \
		fi; \
	else \
		echo "  ‚ùå package.json non trouv√©"; \
	fi

# Valeur par d√©faut
.DEFAULT_GOAL := help
