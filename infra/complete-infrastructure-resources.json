{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "4874636153914553328"
    }
  },
  "parameters": {
    "resourceBaseName": {
      "type": "string",
      "metadata": {
        "description": "Base name for all resources"
      }
    },
    "environment": {
      "type": "string",
      "metadata": {
        "description": "Environment name (dev, staging, prod)"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "publisherEmail": {
      "type": "string",
      "metadata": {
        "description": "Publisher email for API Management"
      }
    },
    "publisherName": {
      "type": "string",
      "metadata": {
        "description": "Publisher name for API Management"
      }
    },
    "postgresAdminLogin": {
      "type": "securestring",
      "metadata": {
        "description": "PostgreSQL administrator login"
      }
    },
    "postgresAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "PostgreSQL administrator password"
      }
    },
    "postgresServerName": {
      "type": "string",
      "metadata": {
        "description": "PostgreSQL server name"
      }
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Key Vault name"
      }
    },
    "apimName": {
      "type": "string",
      "metadata": {
        "description": "API Management name"
      }
    },
    "appInsightsName": {
      "type": "string",
      "metadata": {
        "description": "Application Insights name"
      }
    },
    "appServicePlanName": {
      "type": "string",
      "metadata": {
        "description": "App Service Plan name"
      }
    },
    "webAppName": {
      "type": "string",
      "metadata": {
        "description": "Web App name"
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "Log Analytics Workspace name"
      }
    },
    "quotaDatabaseName": {
      "type": "string",
      "metadata": {
        "description": "Database name for quotas"
      }
    },
    "appDatabaseUser": {
      "type": "string",
      "metadata": {
        "description": "Application database user"
      }
    },
    "sharedResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Shared resource group name"
      }
    },
    "sharedOpenAIName": {
      "type": "string",
      "metadata": {
        "description": "Shared OpenAI service name"
      }
    },
    "sharedKeyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Shared Key Vault name"
      }
    },
    "sharedOpenAIEndpoint": {
      "type": "string",
      "metadata": {
        "description": "Shared OpenAI endpoint"
      }
    },
    "sharedOpenAIDeploymentName": {
      "type": "string",
      "metadata": {
        "description": "Shared OpenAI deployment name"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[format('{0}-identity', parameters('resourceBaseName'))]",
      "location": "[parameters('location')]",
      "tags": {
        "Environment": "[parameters('environment')]",
        "Project": "ChatBottez-GPT41",
        "Purpose": "Managed Identity for Bot Framework"
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers",
      "apiVersion": "2022-12-01",
      "name": "[parameters('postgresServerName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_B1ms",
        "tier": "Burstable"
      },
      "properties": {
        "administratorLogin": "[parameters('postgresAdminLogin')]",
        "administratorLoginPassword": "[parameters('postgresAdminPassword')]",
        "version": "16",
        "storage": {
          "storageSizeGB": 32
        },
        "backup": {
          "backupRetentionDays": 7,
          "geoRedundantBackup": "Disabled"
        },
        "highAvailability": {
          "mode": "Disabled"
        }
      },
      "tags": {
        "Environment": "[parameters('environment')]",
        "Project": "ChatBottez-GPT41",
        "Purpose": "PostgreSQL database for quota management"
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
      "apiVersion": "2022-12-01",
      "name": "[format('{0}/{1}', parameters('postgresServerName'), parameters('quotaDatabaseName'))]",
      "properties": {
        "charset": "UTF8",
        "collation": "en_US.utf8"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName'))]"
      ]
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
      "apiVersion": "2022-12-01",
      "name": "[format('{0}/{1}', parameters('postgresServerName'), 'AllowAzureServices')]",
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "0.0.0.0"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-02-01",
      "name": "[parameters('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[tenant().tenantId]",
        "accessPolicies": [],
        "enableSoftDelete": true,
        "enableRbacAuthorization": false,
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": true,
        "softDeleteRetentionInDays": 7,
        "publicNetworkAccess": "Enabled"
      },
      "tags": {
        "Environment": "[parameters('environment')]",
        "Project": "ChatBottez-GPT41",
        "Purpose": "Key Vault for secrets management"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[parameters('logAnalyticsWorkspaceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30,
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        }
      },
      "tags": {
        "Environment": "[parameters('environment')]",
        "Project": "ChatBottez-GPT41",
        "Purpose": "Log Analytics for monitoring"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[parameters('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
        "IngestionMode": "LogAnalytics",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      },
      "tags": {
        "Environment": "[parameters('environment')]",
        "Project": "ChatBottez-GPT41",
        "Purpose": "Application monitoring and telemetry"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service",
      "apiVersion": "2023-05-01-preview",
      "name": "[parameters('apimName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Developer",
        "capacity": 1
      },
      "properties": {
        "publisherEmail": "[parameters('publisherEmail')]",
        "publisherName": "[parameters('publisherName')]",
        "notificationSenderEmail": "apimgmt-noreply@mail.windowsazure.com",
        "customProperties": {
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Ssl30": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11": "false",
          "Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Ssl30": "false"
        },
        "virtualNetworkType": "None",
        "apiVersionConstraint": {
          "minApiVersion": "2019-01-01"
        }
      },
      "tags": {
        "Environment": "[parameters('environment')]",
        "Project": "ChatBottez-GPT41",
        "Purpose": "API Gateway and quota management"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/loggers",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}', parameters('apimName'), 'applicationinsights-logger')]",
      "properties": {
        "loggerType": "applicationInsights",
        "credentials": {
          "instrumentationKey": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').InstrumentationKey]"
        },
        "isBuffered": true,
        "description": "Application Insights logger for ChatBottez GPT-4.1"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('apimName'))]",
        "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}', parameters('apimName'), 'quota-limit')]",
      "properties": {
        "displayName": "QuotaLimit",
        "value": "300",
        "secret": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('apimName'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/products",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}', parameters('apimName'), 'chatbot-quota-product')]",
      "properties": {
        "displayName": "Chatbot with Quota Management",
        "description": "AI Chatbot API with 300 questions per month quota enforcement",
        "state": "published",
        "subscriptionRequired": true,
        "approvalRequired": false,
        "subscriptionsLimit": 1000,
        "terms": "By subscribing to this product, you agree to the quota limits and billing terms."
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('apimName'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}', parameters('apimName'), 'chatbot-api')]",
      "properties": {
        "displayName": "AI Chatbot API",
        "description": "Microsoft Teams AI Chatbot with quota management",
        "serviceUrl": "[format('https://{0}.azurewebsites.net', parameters('webAppName'))]",
        "path": "chatbot",
        "protocols": [
          "https"
        ],
        "subscriptionKeyParameterNames": {
          "header": "Ocp-Apim-Subscription-Key",
          "query": "subscription-key"
        },
        "apiRevision": "1",
        "apiVersion": "v1"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('apimName'))]",
        "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}/{2}', parameters('apimName'), 'chatbot-api', 'post-api-messages')]",
      "properties": {
        "displayName": "Process Message",
        "method": "POST",
        "urlTemplate": "/api/messages",
        "description": "Processes bot messages and applies quota"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apimName'), 'chatbot-api')]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}/{2}/{3}', parameters('apimName'), 'chatbot-api', 'post-api-messages', 'policy')]",
      "properties": {
        "value": "      <policies>\r\n          <inbound>\r\n              <base />\r\n              <set-variable name=\"subscription-id\" value=\"@(context.Subscription.Id)\" />\r\n              <quota-by-key\r\n                  calls=\"300\"\r\n                  renewal-period=\"month\"\r\n                  counter-key=\"@(context.Subscription.Id)\"\r\n                  increment-condition=\"@(context.Response.StatusCode >= 200 && context.Response.StatusCode < 300)\" />\r\n              <rate-limit-by-key\r\n                  calls=\"60\"\r\n                  renewal-period=\"60\"\r\n                  counter-key=\"@(context.Subscription.Id + &quot;-rate&quot;)\" />\r\n              <set-header name=\"x-apim-subscription-id\" exists-action=\"override\">\r\n                  <value>@(context.Subscription.Id)</value>\r\n              </set-header>\r\n          </inbound>\r\n          <backend>\r\n              <base />\r\n          </backend>\r\n          <outbound>\r\n              <base />\r\n              <set-header name=\"x-quota-remaining\" exists-action=\"override\">\r\n                  <value>@{\r\n                      var quotaLimit = 300;\r\n                      var quotaCounter = context.Variables.GetValueOrDefault<int>(\"quota-counter\", 0);\r\n                      return (quotaLimit - quotaCounter).ToString();\r\n                  }</value>\r\n              </set-header>\r\n              <set-header name=\"x-quota-total\" exists-action=\"override\">\r\n                  <value>300</value>\r\n              </set-header>\r\n          </outbound>\r\n          <on-error>\r\n              <base />\r\n              <choose>\r\n                  <when condition=\"@(context.LastError.Source == &quot;quota-by-key&quot;)\">\r\n                      <return-response>\r\n                          <set-status code=\"429\" reason=\"Quota Exceeded\" />\r\n                          <set-header name=\"Content-Type\" exists-action=\"override\">\r\n                              <value>application/json</value>\r\n                          </set-header>\r\n                          <set-body>@{\r\n                              return new JObject(\r\n                                  new JProperty(\"error\", \"Quota Exceeded\"),\r\n                                  new JProperty(\"message\", \"You have exceeded your monthly quota of 300 questions. Please upgrade your plan or wait for the quota to reset.\"),\r\n                                  new JProperty(\"details\", new JObject(\r\n                                      new JProperty(\"quota_limit\", 300),\r\n                                      new JProperty(\"quota_remaining\", 0)\r\n                                  ))\r\n                              ).ToString();\r\n                          }</set-body>\r\n                      </return-response>\r\n                  </when>\r\n              </choose>\r\n          </on-error>\r\n      </policies>\r\n    ",
        "format": "xml"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('apimName'), 'chatbot-api', 'post-api-messages')]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/products/apis",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}/{2}', parameters('apimName'), 'chatbot-quota-product', 'chatbot-api')]",
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apimName'), 'chatbot-api')]",
        "[resourceId('Microsoft.ApiManagement/service/products', parameters('apimName'), 'chatbot-quota-product')]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-09-01",
      "name": "[parameters('appServicePlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "B1",
        "tier": "Basic",
        "size": "B1",
        "family": "B",
        "capacity": 1
      },
      "properties": {
        "perSiteScaling": false,
        "elasticScaleEnabled": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": false,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0,
        "zoneRedundant": false
      },
      "tags": {
        "Environment": "[parameters('environment')]",
        "Project": "ChatBottez-GPT41",
        "Purpose": "App Service Plan for Teams Bot"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-09-01",
      "name": "[parameters('webAppName')]",
      "location": "[parameters('location')]",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
        "httpsOnly": true,
        "siteConfig": {
          "alwaysOn": true,
          "nodeVersion": "18-lts",
          "appSettings": [
            {
              "name": "NODE_ENV",
              "value": "production"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "18.17.0"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            },
            {
              "name": "RUNNING_ON_AZURE",
              "value": "1"
            },
            {
              "name": "BOT_ID",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-identity', parameters('resourceBaseName'))), '2023-01-31').clientId]"
            },
            {
              "name": "BOT_TENANT_ID",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-identity', parameters('resourceBaseName'))), '2023-01-31').tenantId]"
            },
            {
              "name": "BOT_TYPE",
              "value": "UserAssignedMsi"
            },
            {
              "name": "AZURE_OPENAI_ENDPOINT",
              "value": "[parameters('sharedOpenAIEndpoint')]"
            },
            {
              "name": "AZURE_OPENAI_KEY",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName=azure-openai-key)', parameters('keyVaultName'))]"
            },
            {
              "name": "AZURE_OPENAI_DEPLOYMENT_NAME",
              "value": "[parameters('sharedOpenAIDeploymentName')]"
            },
            {
              "name": "DATABASE_URL",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName=database-url)', parameters('keyVaultName'))]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').ConnectionString]"
            },
            {
              "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
              "value": "~3"
            }
          ],
          "connectionStrings": [
            {
              "name": "DefaultConnection",
              "connectionString": "[format('@Microsoft.KeyVault(VaultName={0};SecretName=database-url)', parameters('keyVaultName'))]",
              "type": "PostgreSQL"
            }
          ]
        }
      },
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-identity', parameters('resourceBaseName'))))]": {}
        }
      },
      "tags": {
        "Environment": "[parameters('environment')]",
        "Project": "ChatBottez-GPT41",
        "Purpose": "Teams Bot Application"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
        "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-identity', parameters('resourceBaseName')))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2023-02-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'add')]",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-identity', parameters('resourceBaseName'))), '2023-01-31').tenantId]",
            "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-identity', parameters('resourceBaseName'))), '2023-01-31').principalId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-identity', parameters('resourceBaseName')))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'database-url')]",
      "properties": {
        "value": "[format('postgresql://{0}:{1}@{2}:5432/{3}?sslmode=require', parameters('postgresAdminLogin'), parameters('postgresAdminPassword'), reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName')), '2022-12-01').fullyQualifiedDomainName, parameters('quotaDatabaseName'))]",
        "contentType": "text/plain",
        "attributes": {
          "enabled": true
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'azure-openai-endpoint')]",
      "properties": {
        "value": "[parameters('sharedOpenAIEndpoint')]",
        "contentType": "text/plain",
        "attributes": {
          "enabled": true
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'azure-openai-deployment-name')]",
      "properties": {
        "value": "[parameters('sharedOpenAIDeploymentName')]",
        "contentType": "text/plain",
        "attributes": {
          "enabled": true
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'application-insights-connection-string')]",
      "properties": {
        "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').ConnectionString]",
        "contentType": "text/plain",
        "attributes": {
          "enabled": true
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "Azure-Bot-registration",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "resourceBaseName": {
            "value": "[parameters('resourceBaseName')]"
          },
          "identityClientId": {
            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-identity', parameters('resourceBaseName'))), '2023-01-31').clientId]"
          },
          "identityResourceId": {
            "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-identity', parameters('resourceBaseName')))]"
          },
          "identityTenantId": {
            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-identity', parameters('resourceBaseName'))), '2023-01-31').tenantId]"
          },
          "botAppDomain": {
            "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2022-09-01').defaultHostName]"
          },
          "botDisplayName": {
            "value": "[format('ChatBottez GPT-4.1 {0}', parameters('environment'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "6272524701772293425"
            }
          },
          "parameters": {
            "resourceBaseName": {
              "type": "string",
              "minLength": 4,
              "maxLength": 20,
              "metadata": {
                "description": "Used to generate names for all resources in this file"
              }
            },
            "botDisplayName": {
              "type": "string",
              "maxLength": 42
            },
            "botServiceName": {
              "type": "string",
              "defaultValue": "[parameters('resourceBaseName')]"
            },
            "botServiceSku": {
              "type": "string",
              "defaultValue": "F0"
            },
            "identityResourceId": {
              "type": "string"
            },
            "identityClientId": {
              "type": "string"
            },
            "identityTenantId": {
              "type": "string"
            },
            "botAppDomain": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.BotService/botServices",
              "apiVersion": "2021-03-01",
              "name": "[parameters('botServiceName')]",
              "kind": "azurebot",
              "location": "global",
              "properties": {
                "displayName": "[parameters('botDisplayName')]",
                "endpoint": "[format('https://{0}/api/messages', parameters('botAppDomain'))]",
                "msaAppId": "[parameters('identityClientId')]",
                "msaAppMSIResourceId": "[parameters('identityResourceId')]",
                "msaAppTenantId": "[parameters('identityTenantId')]",
                "msaAppType": "UserAssignedMSI"
              },
              "sku": {
                "name": "[parameters('botServiceSku')]"
              }
            },
            {
              "type": "Microsoft.BotService/botServices/channels",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('botServiceName'), 'MsTeamsChannel')]",
              "location": "global",
              "properties": {
                "channelName": "MsTeamsChannel"
              },
              "dependsOn": [
                "[resourceId('Microsoft.BotService/botServices', parameters('botServiceName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-identity', parameters('resourceBaseName')))]",
        "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
      ]
    }
  ],
  "outputs": {
    "postgresServerName": {
      "type": "string",
      "value": "[parameters('postgresServerName')]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[parameters('keyVaultName')]"
    },
    "apiManagementName": {
      "type": "string",
      "value": "[parameters('apimName')]"
    },
    "applicationInsightsName": {
      "type": "string",
      "value": "[parameters('appInsightsName')]"
    },
    "webAppName": {
      "type": "string",
      "value": "[parameters('webAppName')]"
    },
    "appServicePlanName": {
      "type": "string",
      "value": "[parameters('appServicePlanName')]"
    },
    "managedIdentityName": {
      "type": "string",
      "value": "[format('{0}-identity', parameters('resourceBaseName'))]"
    },
    "BOT_AZURE_APP_SERVICE_RESOURCE_ID": {
      "type": "string",
      "value": "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
    },
    "BOT_DOMAIN": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2022-09-01').defaultHostName]"
    },
    "BOT_ID": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-identity', parameters('resourceBaseName'))), '2023-01-31').clientId]"
    },
    "BOT_TENANT_ID": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-identity', parameters('resourceBaseName'))), '2023-01-31').tenantId]"
    },
    "applicationInsightsConnectionString": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').ConnectionString]"
    },
    "applicationInsightsInstrumentationKey": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').InstrumentationKey]"
    },
    "webAppUrl": {
      "type": "string",
      "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2022-09-01').defaultHostName)]"
    },
    "apiManagementGatewayUrl": {
      "type": "string",
      "value": "[format('https://{0}', reference(resourceId('Microsoft.ApiManagement/service', parameters('apimName')), '2023-05-01-preview').gatewayUrl)]"
    },
    "postgresServerFqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName')), '2022-12-01').fullyQualifiedDomainName]"
    },
    "apimChatbotApiUrl": {
      "type": "string",
      "value": "[format('https://{0}/chatbot', reference(resourceId('Microsoft.ApiManagement/service', parameters('apimName')), '2023-05-01-preview').gatewayUrl)]"
    },
    "apimProductName": {
      "type": "string",
      "value": "chatbot-quota-product"
    },
    "applicationInsightsId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
    },
    "apiManagementId": {
      "type": "string",
      "value": "[resourceId('Microsoft.ApiManagement/service', parameters('apimName'))]"
    },
    "webAppId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
    },
    "postgresServerId": {
      "type": "string",
      "value": "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName'))]"
    },
    "keyVaultId": {
      "type": "string",
      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
    },
    "managedIdentityId": {
      "type": "string",
      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-identity', parameters('resourceBaseName')))]"
    }
  }
}